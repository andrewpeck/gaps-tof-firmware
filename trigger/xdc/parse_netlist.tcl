
#TODO GBE
source callisto_pin_lut.tcl

proc translate_name {name} {

    # lowercase everything
    set name [string tolower $name]

    # trim off fpga_dsi_on_1 into dsi_on_1
    if {[string range $name 0 4] eq "fpga_"} {
        set name [string range $name 5 99]
    }

    # rename lvs_sync_cc to lvs_sync_ccb
    # (altium trims the b from the netlist for some reason)
    if {$name eq "lvs_sync_cc"} {
        set name "lvs_sync_ccb"
    }

    # rb_d_{DSI 1..5}_{PAIR 0..1}_{RB 1..5} --> rb_d_[Q]
    if {[string range $name 0 4] eq "rb_d_"} {
        set args [split $name "_"]
        set dsi  [expr [lindex $args 2] - 1]
        set pair [lindex $args 3]
        set rb   [expr [lindex $args 4] - 1]
        set pin [expr $dsi * 10 + $rb * 2 + $pair]
        set name rb_data_o\[$pin\]
        # puts $name
    }

    # lt_data_X_Y_Z --> lt_data_i[Q]
    if {[string range $name 0 7] eq "lt_data_"} {
        set args [split $name "_"]
        set dsi  [lindex $args 2]
        set lt   [expr [lindex $args 4] - 1]
        set pair [lindex $args 3]
        set pol  [lindex $args 5]
        set pin [expr $dsi * 15 + $lt * 3 + $pair]
        #puts "DSI = $dsi lt = $lt pair=$pair"
        set name lt_data_i_$pol\[$pin\]
    }

    # name_X_p --> name_x_p[X]
    if {[regexp -all {([A-z,_]+)_([0-9])(_[pn])?} $name reg head tail pol]} {
        # puts $head
        # puts $tail
        set args [split $name "_"]
        set pair  [lindex $args 2]

        # fb clk is index from 1 in the schematic, convert to zero
        if {[lsearch [list "fb_clk" "dsi_on" "lvs_sync"] $head] >= 0} {
            set pair [expr $pair - 1]
        }

        set name $head$pol\[$pair\]
    }

    # gbe_rxdX  rgmii_rxd[X]
    if {[regexp -all {gbe_([tr])xd([0-9])} $name sig txrx number]} {
        # puts $txrx
        # puts $number
        set name "rgmii_${txrx}xd\[$number\]"
    }

    set name [string map {"gbe_rxd_clk" "rgmii_rx_clk"} $name]
    set name [string map {"gbe_gtx_clk" "rgmii_tx_clk"} $name]
    set name [string map {"gbe_col" "NC"} $name]
    set name [string map {"gbe_crs" "NC"} $name]
    set name [string map {"gbe_rx_er" "NC"} $name]
    set name [string map {"gbe_tx_er" "NC"} $name]
    set name [string map {"gbe_rxd_dv" "rgmii_rx_ctl"} $name]
    set name [string map {"gbe_tx_en" "rgmii_tx_ctl"} $name]
    set name [string map {"gbe_clk125_ndo" "rgmii_clk125"} $name]

    set name [string map {"gbe_" "rgmii_"} $name]

    return [format "%20s" $name]
}

set constraints [open "generated_pinout.xdc" w]

# puts $constraints "# this file is automatically generated and should not be edited by hand"
# puts $constraints "# please re-run the generation script with:"
# puts $constraints "#      tclsh parse_netlist.tcl"

set fp [open "netlist.net" r]
set file_data [read $fp]

set nets [split $file_data "\n"]

set ascii_subtract [dict create \
                        "G" "A" \
                        "H" "B" \
                        "I" "C" \
                        "J" "D" \
                        "K" "E" \
                        "L" "F"]

set excluded_signals "GND +12v"

set excluded_pins ""
# set excluded_pins "EXT_VCC GND"

foreach line $nets {

    set fields [regexp -all -inline {\S+} $line]

    set signal [lindex $fields 0]
    set conn   [lindex $fields 1]
    set pin    [lindex $fields 2]

    set row [string toupper [string range $pin 0 0]]
    set num [string toupper [string range $pin 1 3]]

    if {[lsearch $excluded_signals $signal] < 0} {
        if {$conn eq "P1" || $conn eq "P2"} {

            if {[lsearch "G H I J K L" $row] >= 0} {

                set conn "P2"
                set row [dict get $ascii_subtract $row]
                set pin $row$num
            }

            if {[string equal $conn "P1"] && [lsearch "M1 M2 M3 M4" $pin] >= 0} {
                continue
            }
            set iob [get_fpga_pin_from_header_pin $conn $pin]

            if {[lsearch $excluded_pins $iob] < 0} {

                # puts "$signal"
                # puts " > conn = $conn"
                # puts " > pin  = $pin"
                # puts " > iob  = $iob"
                set new_signal [translate_name $signal]
                if {![regexp {^\s*NC\s*$} $new_signal]} {
                    puts $constraints "set_property PACKAGE_PIN [format %4s $iob] \[get_ports $new_signal\]; # $conn $pin"
                }
            }
        }
    }
}
close $fp
close $constraints

exec sort -k 5 generated_pinout.xdc -o generated_pinout.xdc
