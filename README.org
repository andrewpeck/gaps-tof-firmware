#+OPTIONS: toc:5
#+OPTIONS: ^:nil
* Table of Contents :TOC_2:
  - [[#organization][Organization]]
  - [[#building-the-firmware][Building the Firmware]]
  - [[#block-design-creation][Block Design Creation]]
  - [[#dataformat][Dataformat]]
  - [[#trigger-data-format][Trigger Data Format]]
  - [[#address-table][Address Table]]

** Organization

#+BEGIN_EXAMPLE
  readout-firmware/
    ├── Hog : Submodule containing the HOG project
    ├── Top : Top level project configuration files for HOG
    ├── bd  : Block diagram files
    ├── tcl : TCL scripts for ip core creation
    ├── ip  : Holds both user and Vivado IP cores
    ├── dma : Files for DMA driver
    ├── drs : Files for DRS4 control
    ├── trg : Files for AXI-SLAVE trigger interface 
    └── xdc : Xilinx XDC constraint files
#+END_EXAMPLE

** Building the Firmware

This firmware is using the HOG framework as a build system:
- HOG Documentation: http://hog-user-docs.web.cern.ch
- HOG Source Code: https://gitlab.cern.ch/hog/Hog

Currently the firmware is built around three separately compiled IP cores which are then integrated
together into a common project through the graphical block diagram generator.

The IP cores can be built with the following commands. Note that because the these blocks are
constructed as standalone IP cores, they go through the entire out-of-context synthesis process at
the time of project creation. No further action is required with these IPs.

#+BEGIN_EXAMPLE
Hog/CreateProject.sh trg-ip
Hog/CreateProject.sh dma-ip
Hog/CreateProject.sh drs-ip
#+END_EXAMPLE

After that, the combined project can be created with the command

#+BEGIN_EXAMPLE
Hog/CreateProject.sh readout-board
#+END_EXAMPLE

Synthesis can be launched with the command

#+BEGIN_EXAMPLE
Hog/LaunchSynthesis.sh readout-board
#+END_EXAMPLE

Implementation can be launched with the command

#+BEGIN_EXAMPLE
Hog/LaunchImplementation.sh readout-board
#+END_EXAMPLE

A more streamlined HDL based project organization is forthcoming...

*To use any of these commands you need to make sure that vivado is in your path*, i.e. if you type
vivado into the terminal it should open vivado. The scripts use only very primitive bash and
otherwise use the vivado TCL shell, so there should be no external dependencies.

A complete set of commands which should build the project, tested on Vivado 2018.2 and 2019.2 is:

#+BEGIN_EXAMPLE bash
git clone https://gitlab.com/ucla-gaps-tof/firmware
cd firmware
git submodule update --init
make
#+END_EXAMPLE

Best practice is for released builds the entire repo should be cloned from scratch and built from
the clean cloned repository to ensure that no files are missing, the build directory is clean, and
so on.

** Block Design Creation

HOG wrappers provide facilities for creation of TCL files from Block Designs, and Block Designs from
TCL.

**** To export a TCL file from a block design:

#+BEGIN_EXAMPLE
Hog/CreateProject.sh bd-to-tcl
#+END_EXAMPLE

**** To generate a block design from a TCL file:

#+BEGIN_EXAMPLE
Hog/CreateProject.sh tcl-to-bd
#+END_EXAMPLE

Block designs are easier to work with, but do not play well with diff and have more issues with
version lock-in.

Both tcl and bd should be committed to the repository. For working with the same (or close) vivado
versions the bd file can just be opened directly (and the tcl should be exported after any changes
are made).

The tcl-to-bd flow can be used when changing versions. There is still some version-lock-in but
efforts were made to minimize it.

*** 2018.2 Compatibility

One note. Newer versions of Vivado add the flag =force= onto the end of the =assign_bd_address=
commands in the =readout-board-bd.tcl= file.

The force flag does not exist in Vivado 2018.2 for example. To keep the TCL file compatible between
versions you can change the lines from:

#+BEGIN_EXAMPLE tcl
assign_bd_address -offset 0x80000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces processing_system7_0/Data] [get_bd_addr_segs drs_top_0/S_AXI_LITE/reg0] -force
#+END_EXAMPLE

to

#+BEGIN_EXAMPLE tcl
assign_bd_address -offset 0x80000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces processing_system7_0/Data] [get_bd_addr_segs drs_top_0/S_AXI_LITE/reg0]
#+END_EXAMPLE

** Dataformat
  |-----------+--------+------------------------------------------|
  | Field     | Len    | Description                              |
  |-----------+--------+------------------------------------------|
  | HEAD      | [15:0] | 0xAAAA                                   |
  |-----------+--------+------------------------------------------|
  | STATUS    | [15:0] | [0] =sync_err                            |
  |           |        | [1] = drs was busy (lost trigger)        |
  |           |        | [15:1]=reserved                          |
  |-----------+--------+------------------------------------------|
  | LEN       | [15:0] | length of packet, need to precalculate   |
  |-----------+--------+------------------------------------------|
  | ROI       | [15:0] | size of region of interest               |
  |-----------+--------+------------------------------------------|
  | DNA       | [63:0] | Zynq7000 Device DNA                      |
  |-----------+--------+------------------------------------------|
  | ID        | [15:0] | [15:8] = readout board ID                |
  |           |        | [7:1] = reserved                         |
  |           |        | [0] = drs #0 or #1                       |
  |-----------+--------+------------------------------------------|
  | CH_MASK   | [15:0] | Channel Enable Mask '1'=ON               |
  |           |        | should be either upper 8 bits or lower 8 |
  |           |        | depending on the chip id                 |
  |-----------+--------+------------------------------------------|
  | EVENT_CNT | [31:0] | Event ID Received From Trigger           |
  |-----------+--------+------------------------------------------|
  | TIMESTAMP | [47:0] | # of 33MHz clocks elapsed since resync   |
  |-----------+--------+------------------------------------------|
  | PAYLOAD   |        | 0 to XXXX words                          |
  |           |        |                                          |
  |           |        | HEADER[15:0] = Channel ID                |
  |           |        | data bits [13:0] = ADC data              |
  |           |        | data bits [15:14] parity                 |
  |           |        | trailer[31:0] = crc32                    |
  |-----------+--------+------------------------------------------|
  | CRC32     | [31:0] | Packet CRC (excluding Trailer)           |
  |-----------+--------+------------------------------------------|
  | TAIL      | [15:0] | 0x5555                                   |
  |-----------+--------+------------------------------------------|

** Trigger Data Format

|----------+--------+-----------------------------------------|
| Field    | Len    | Description                             |
|----------+--------+-----------------------------------------|
| START    | [0]    | 1'b1 = Start bit                        |
|----------+--------+-----------------------------------------|
| CMD      | [0]    | 1'b0 = resync                           |
|          |        | 1'b1 = trigger                          |
|----------+--------+-----------------------------------------|
| CH_MASK  | [15:0] | bitfield set to '1' to readout a chanel |
|          |        | [7:0]=DRS0 channels 7:0                 |
|          |        | [15:8]=DRS1 channels 7:0                |
|----------+--------+-----------------------------------------|
| EVENT_ID | [31:0] | Event ID                                |
|----------+--------+-----------------------------------------|

** Address Table

The address table is defined in a "templated" XML file: [[registers.xml]]

A convenient document describing the address table can be seen at:
- [[file:regmap/address_table.org][DRS Address Table]]
